/* eslint-disable no-console */

var fs = require('fs');
var render = require('json-templater/string');
var uppercamelcase = require('uppercamelcase');
var path = require('path');
var endOfLine = require('os').EOL;
var Components = require('../../components.json');

var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
var INSTALL_COMPONENT_TEMPLATE = '    {{name}}';
var IMPORT_TEMPLATE = 'import {{name}} from \'./components/{{package}}\';';
var MAIN_TEMPLATE = `/* Automatic generated by './build/bin/build-entry.js' */

{{include}}

const components = [
{{install}},
    AccordionTransition
];

const install = function(Vue) {
    /* istanbul ignore if */
    if (install.installed) return;

    components.map((component) => {
        Vue.component(component.name, component);
    });

    Vue.use(LoadingPlugin);
    Vue.use(ToastPlugin);
    Vue.use(ModalPlugin);
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
}

module.exports = {
    version: '{{version}}',
    install,
    AccordionTransition,
    LoadingPlugin,
    ToastPlugin,
    ModalPlugin,
    ConfigPlugin,
    TransferDom,
{{list}}
};
`;

var ComponentNames = Object.keys(Components.base);

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach((name) => {
    var componentName = uppercamelcase(name);

    includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
        name: componentName,
        package: name
    }));

    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
        name: componentName,
        component: name
    }));

    listTemplate.push(`    ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
    include: includeComponentTemplate.join(endOfLine),
    install: installTemplate.join(`,${endOfLine}`),
    version: process.env.VERSION || require('../../package.json').version,
    list: listTemplate.join(`,${endOfLine}`)
});

fs.writeFileSync(OUTPUT_PATH, template);

console.log('[build entry] DONE:', OUTPUT_PATH);
